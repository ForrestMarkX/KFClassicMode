function int GetLivingPlayerCount()
{
    local KFPlayerController P;
    local int UsedLivingHumanPlayersCount;
 
    foreach WorldInfo.AllControllers(class'KFPlayerController', P)
    {
        if( P != None && P.Pawn != None && P.Pawn.IsAliveAndWell() )
        {
            UsedLivingHumanPlayersCount++;
        }
    }
 
    return UsedLivingHumanPlayersCount;
}

function AddPlayerXPEx(KFPlayerController PC, int XP, class<KFPerk> PerkClass, bool bApplyPrestigeBonus = false)
{
    PC.OnPlayerXPAdded(XP, PerkClass);
}

// Required to bypass the usless function ValidateMonsterClassForXP
protected function DistributeMoneyAndXP(class<KFPawn_Monster> MonsterClass, const out array<DamageInfo> DamageHistory, Controller Killer)
{
	local int i, j, TotalDamage, EarnedDosh;
	local float AdjustedAIValue, ScoreDenominator, XP;
	local KFPlayerController KFPC;
	local KFPlayerReplicationInfo DamagerKFPRI;
	local KFPerk InstigatorPerk;
	local bool bIsBossKill;

	for ( i = 0; i < DamageHistory.Length; i++ )
	{
		TotalDamage += DamageHistory[i].TotalDamage;
	}

	if ( TotalDamage <= 0 )
	{
		`warn("Total damage given to this zed is less or equal zero! This should never happen");
		return;
	}

	bIsBossKill = MonsterClass.static.IsABoss();

	// Scale value (via GameInfo) by difficulty and length & player count;
	AdjustedAIValue = GetAdjustedAIDoshValue( MonsterClass );
	ScoreDenominator = AdjustedAIValue / TotalDamage;

	for ( i = 0; i < DamageHistory.Length; i++ )
	{
		if( DamageHistory[i].DamagerController != none
			&& DamageHistory[i].DamagerController.bIsPlayer
			&& DamageHistory[i].DamagerPRI.GetTeamNum() == 0
			&& DamageHistory[i].DamagerPRI != none )
		{
			EarnedDosh = Round( DamageHistory[i].TotalDamage * ScoreDenominator );
			//`log("SCORING: Player" @ DamageHistory[i].DamagerPRI.PlayerName @ "received" @ EarnedDosh @ "dosh for killing a" @ MonsterClass, bLogScoring);
			DamagerKFPRI = KFPlayerReplicationInfo(DamageHistory[i].DamagerPRI);
			if( DamagerKFPRI != none )
			{
				//Killer cannot receive assists.
				if( Killer.PlayerReplicationInfo != DamagerKFPRI )
				{
					DamagerKFPRI.Assists++;

					if( DamageHistory[i].DamagePerks.Length == 1 )
					{
						DamageHistory[i].DamagePerks[0].static.ModifyAssistDosh( EarnedDosh );
					}
				}
				if (bIsBossKill && !bSplitBossDoshReward)
				{
					DamagerKFPRI.AddDosh(GetAdjustedAIDoshValue(MonsterClass), true);
				}
				else
				{
					DamagerKFPRI.AddDosh(EarnedDosh, true);
				}


				if( DamagerKFPRI.Team != none )
				{
					//Dosh
					if (bIsBossKill && !bSplitBossDoshReward)
					{
						KFTeamInfo_Human(DamagerKFPRI.Team).AddScore(GetAdjustedAIDoshValue(MonsterClass));
					}
					else
					{
						KFTeamInfo_Human(DamagerKFPRI.Team).AddScore(EarnedDosh);
					}

					if( DamageHistory[i].DamagePerks.Length <= 0 )
					{
						continue;
					}

					// Distribute experience points
					KFPC = KFPlayerController(DamagerKFPRI.Owner);
					if( KFPC != none )
					{
						InstigatorPerk = KFPC.GetPerk();
						if( InstigatorPerk.ShouldGetAllTheXP() )
						{
							AddPlayerXPEx(KFPC, MonsterClass.static.GetXPValue(GameDifficulty), InstigatorPerk.Class, true);
							continue;
						}

						XP = MonsterClass.static.GetXPValue(GameDifficulty) / DamageHistory[i].DamagePerks.Length;

						for( j = 0; j < DamageHistory[i].DamagePerks.Length; j++ )
						{
							AddPlayerXPEx(KFPC, FCeil(XP), DamageHistory[i].DamagePerks[j], true);
						}
					}
				}
			}
		}
	}
}

// Objective maps break when using a gameinfo that isn't the default
function bool IsMapObjectiveEnabled()
{
    return false;
}